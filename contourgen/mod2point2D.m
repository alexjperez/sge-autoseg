function mod2point2D( path_models, path_txts, path_out, N )
% Converts an IMOD model file to a text file where each line corresponds to
% one point of the model file. Each line consists of five numbers, arranged
% as such: Object, Contour, X, Y, Z
%    
% The starting contour is determined by parsing the text files output from 
% tif2mod2D.q. 
%
%    INPUT
%    --------------------
%    path_models    Path containing the input IMOD model files
%    path_txts      Path containing the text files of contour listings 
%                   generated by tif2mod2D.q
%    path_out       Output path to write text files to
%    N              Model number within path_models to process
%
%    DEPENDENCIES
%    --------------------
%    The MatTomo package of PEET is needed:
%    http://bio3d.colorado.edu/imod/matlab.html
%
%    EXAMPLE
%    --------------------
%    mod2point2D('out/mod','out/ncont','out/txt',100);
%

path_mattomo = '/data/aperez/mfiles/MatTomo'; %Path containing MatTomo
addpath(genpath(path_mattomo));

tic;
models = dir(fullfile(path_models,'*.mod'));
txts = dir(fullfile(path_txts,'*.txt'));

%Determine the starting contour number by reading and summing all contour
%listings before the current value of N
C = 1;
for i = 1:N-1
    C = C + load(fullfile(path_txts,txts(i).name));
end

filei = fullfile(path_models,models(N).name); %Name of model file
modi = ImodModel(filei); %Read model file to MATLAB
obji = getObject(modi,1); %Get first object (should be the only object)
Ncont = getNContours(obji); %Determine the total number of contours
text_out = fullfile(path_out,['test_' sprintf('%03d',N) '.txt']);
fprintf('Processing model %s\n',filei);
fprintf('Model %s has %d contours.\n',filei,Ncont);
for j = 1:Ncont %Loop over all contours
    contj = getContour(obji,j); %Read contour
    points = getPoints(contj)'; %Extract contour's points to a matrix
    [NR,NC] = size(points);
    points2write = zeros(NR,NC+2); %Generate a new matrix to add obj and cont listings
    points2write(:,1) = 1; %All contours will belong to object 1
    points2write(:,2) = C; %Second value is the contour number
    points2write(:,3:5) = points;
    %Append to the text file. The space delimiter is required by point2model. A high
    %precision is required because if the contour number exceeds this number of digits,
    %dlmwrite will output it in scientific notation, which point2model cannot understand.
    %A precision of 9 means the file can have one billion contours before this limit is
    %exceeded.
    dlmwrite(text_out,points2write,'delimiter',' ','-append','precision',9);
    C = C + 1;
end

fprintf('Elapsed time: %0.2f seconds\n',toc);

end
